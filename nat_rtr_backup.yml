---
- name: MikroTik full + script backup (SSH, no python on device)
  hosts: NAT_RTR
  gather_facts: no
  vars:
    backup_dir: "/root/network/backups/NAT_RTR"     # local path on your Ansible controller
  pre_tasks:
    - name: Ensure local backup directory exists
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: "0750"
      delegate_to: localhost
      run_once: true

    - name: Set backup timestamp (controller side)
      ansible.builtin.set_fact:
        backup_ts: "{{ lookup('pipe', 'date +%Y%m%d-%H%M%S') }}"

    - name: Ensure SSH port is defined (default 22)
      ansible.builtin.set_fact:
        ansible_port: "{{ ansible_port | default(22) }}"

  tasks:
    - name: Export running configuration to file (.rsc)
      ansible.builtin.raw: /export file={{ inventory_hostname }}_config_{{ backup_ts }}
      changed_when: true

    - name: Export all scripts to file (.rsc)
      ansible.builtin.raw: /system script export file={{ inventory_hostname }}_scripts_{{ backup_ts }}
      changed_when: true

    - name: Export scheduler to file (.rsc)  # optional but useful for restores
      ansible.builtin.raw: /system scheduler export file={{ inventory_hostname }}_scheduler_{{ backup_ts }}
      changed_when: true

    - name: Create full binary backup (.backup) (not encrypted)
      ansible.builtin.raw: /system/backup/save name={{ inventory_hostname }}_full_{{ backup_ts }} dont-encrypt=yes
      changed_when: true

    - name: Fetch config export (.rsc) to controller
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_config_{{ backup_ts }}.rsc"
        dest: "{{ backup_dir }}/"
        flat: yes
        fail_on_missing: yes

    - name: Fetch scripts export (.rsc) to controller
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_scripts_{{ backup_ts }}.rsc"
        dest: "{{ backup_dir }}/"
        flat: yes
        fail_on_missing: yes

    - name: Fetch scheduler export (.rsc) to controller
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_scheduler_{{ backup_ts }}.rsc"
        dest: "{{ backup_dir }}/"
        flat: yes
        fail_on_missing: yes

    - name: Fetch full binary backup (.backup) to controller
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_full_{{ backup_ts }}.backup"
        dest: "{{ backup_dir }}/"
        flat: yes
        fail_on_missing: yes

    - name: Cleanup files from router (keep storage clean)
      ansible.builtin.raw: >
        /file remove [find name~"^{{ inventory_hostname }}_(config|scripts|scheduler|full)_{{ backup_ts }}\.(rsc|backup)$"]
      changed_when: true
