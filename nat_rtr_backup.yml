---
- name: MikroTik full + script backup (Semaphore-safe)
  hosts: NAT_RTR
  gather_facts: no

  vars:
    # Local base dir (Semaphore/Controller সার্ভারে)
    backup_base_dir: "/root/network/backups"
    # প্রতিটি হোস্টের জন্য সাবডির বানাবে: {{ backup_base_dir }}/{{ inventory_hostname }}
    retention_keep: 10     # সর্বশেষ N ফাইল রাখবে (প্রতি টাইপে)

  pre_tasks:
    - name: Ensure per-host backup directory exists (local)
      delegate_to: localhost
      run_once: false
      ansible.builtin.file:
        path: "{{ backup_base_dir }}/{{ inventory_hostname }}"
        state: directory
        mode: "0750"

    - name: Set backup timestamp (local)
      delegate_to: localhost
      run_once: false
      ansible.builtin.set_fact:
        backup_ts: "{{ lookup('pipe', 'date +%Y%m%d-%H%M%S') }}"

    - name: Ensure SSH port is defined (default 22)
      ansible.builtin.set_fact:
        ansible_port: "{{ ansible_port | default(22) }}"

    # Password auth ব্যবহার করলে sshpass দরকার
    - name: Check if sshpass exists (local)
      when: ansible_ssh_pass is defined
      delegate_to: localhost
      run_once: true
      register: sshpass_path
      changed_when: false
      ansible.builtin.shell: |
        command -v sshpass || true


    - name: Install sshpass on Debian/Ubuntu (local)
      when:
        - ansible_ssh_pass is defined
        - sshpass_path.stdout | length == 0
      delegate_to: localhost
      run_once: true
      become: yes
      ansible.builtin.shell: |
        if command -v apt-get >/dev/null 2>&1; then
          apt-get update -y && apt-get install -y sshpass
        elif command -v yum >/dev/null 2>&1 || command -v dnf >/dev/null 2>&1; then
          (command -v yum && yum install -y epel-release || dnf install -y epel-release) || true
          (command -v yum && yum install -y sshpass || dnf install -y sshpass)
        else
          echo "Package manager not found; please install sshpass manually." >&2
          exit 1
        fi

  tasks:
    - name: Export running configuration into file (.rsc) on router
      ansible.builtin.raw: /export file={{ inventory_hostname }}_config_{{ backup_ts }}
      changed_when: true

    - name: Export scripts into file (.rsc) on router
      ansible.builtin.raw: /system script export file={{ inventory_hostname }}_scripts_{{ backup_ts }}
      changed_when: true

    - name: Export scheduler into file (.rsc) on router
      ansible.builtin.raw: /system scheduler export file={{ inventory_hostname }}_scheduler_{{ backup_ts }}
      changed_when: true

    - name: Create full binary backup (.backup) on router
      # চাইলে dont-encrypt=yes এর বদলে password=YOUR_PASS ব্যবহার করতে পারেন
      ansible.builtin.raw: /system/backup/save name={{ inventory_hostname }}_full_{{ backup_ts }} dont-encrypt=yes
      changed_when: true

    # ---------- Fetch to controller ----------
    - name: Fetch config export (.rsc)
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_config_{{ backup_ts }}.rsc"
        dest: "{{ backup_base_dir }}/{{ inventory_hostname }}/"
        flat: yes
        fail_on_missing: yes

    - name: Fetch scripts export (.rsc)
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_scripts_{{ backup_ts }}.rsc"
        dest: "{{ backup_base_dir }}/{{ inventory_hostname }}/"
        flat: yes
        fail_on_missing: yes

    - name: Fetch scheduler export (.rsc)
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_scheduler_{{ backup_ts }}.rsc"
        dest: "{{ backup_base_dir }}/{{ inventory_hostname }}/"
        flat: yes
        fail_on_missing: yes

    - name: Fetch full binary backup (.backup)
      ansible.builtin.fetch:
        src: "/{{ inventory_hostname }}_full_{{ backup_ts }}.backup"
        dest: "{{ backup_base_dir }}/{{ inventory_hostname }}/"
        flat: yes
        fail_on_missing: yes

    # ---------- Cleanup router temp files ----------
    - name: Cleanup exported files from router storage
      ansible.builtin.raw: >
        /file remove [find name~"^{{ inventory_hostname }}_(config|scripts|scheduler)_{{ backup_ts }}\.rsc$"];
        /file remove [find name~"^{{ inventory_hostname }}_full_{{ backup_ts }}\.backup$"]
      changed_when: true

    # ---------- Retention (local) ----------
    - name: Retain only last N config exports (local)
      delegate_to: localhost
      run_once: false
      vars:
        pattern: "{{ backup_base_dir }}/{{ inventory_hostname }}/{{ inventory_hostname }}_config_*.rsc"
      ansible.builtin.shell: |
        ls -1t {{ pattern }} 2>/dev/null | awk 'NR>{{ retention_keep }}' | xargs -r rm -f
      changed_when: false

    - name: Retain only last N scripts exports (local)
      delegate_to: localhost
      run_once: false
      vars:
        pattern: "{{ backup_base_dir }}/{{ inventory_hostname }}/{{ inventory_hostname }}_scripts_*.rsc"
      ansible.builtin.shell: |
        ls -1t {{ pattern }} 2>/dev/null | awk 'NR>{{ retention_keep }}' | xargs -r rm -f
      changed_when: false

    - name: Retain only last N scheduler exports (local)
      delegate_to: localhost
      run_once: false
      vars:
        pattern: "{{ backup_base_dir }}/{{ inventory_hostname }}/{{ inventory_hostname }}_scheduler_*.rsc"
      ansible.builtin.shell: |
        ls -1t {{ pattern }} 2>/dev/null | awk 'NR>{{ retention_keep }}' | xargs -r rm -f
      changed_when: false

    - name: Retain only last N binary backups (local)
      delegate_to: localhost
      run_once: false
      vars:
        pattern: "{{ backup_base_dir }}/{{ inventory_hostname }}/{{ inventory_hostname }}_full_*.backup"
      ansible.builtin.shell: |
        ls -1t {{ pattern }} 2>/dev/null | awk 'NR>{{ retention_keep }}' | xargs -r rm -f
      changed_when: false
