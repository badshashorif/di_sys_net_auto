---
- name: MikroTik full + script backup (Semaphore-safe via localhost SSH)
  hosts: NAT_RTR
  gather_facts: no

  vars:
    backup_base_dir: "/root/network/backups"  # Local path on Semaphore/Controller
    retention_keep: 10
    ssh_args_common: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

  pre_tasks:
    - name: Ensure per-host backup directory exists (local)
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ backup_base_dir }}/{{ inventory_hostname }}"
        state: directory
        mode: "0750"

    - name: Set backup timestamp (local)
      delegate_to: localhost
      ansible.builtin.set_fact:
        backup_ts: "{{ lookup('pipe', 'date +%Y%m%d-%H%M%S') }}"

    - name: Ensure SSH port is defined (default 22)
      ansible.builtin.set_fact:
        ansible_port: "{{ ansible_port | default(22) }}"

    - name: Check if sshpass exists (local) when password is used
      when: ansible_ssh_pass is defined
      delegate_to: localhost
      register: sshpass_path
      changed_when: false
      failed_when: false
      ansible.builtin.command: command -v sshpass

    - name: Install sshpass (local) if missing
      when:
        - ansible_ssh_pass is defined
        - (sshpass_path.rc is defined) and (sshpass_path.rc != 0)
      delegate_to: localhost
      become: yes
      ansible.builtin.shell: |
        if command -v apt-get >/dev/null 2>&1; then
          apt-get update -y && apt-get install -y sshpass
        elif command -v yum >/dev/null 2>&1 || command -v dnf >/dev/null 2>&1; then
          (command -v yum && yum install -y epel-release || dnf install -y epel-release) || true
          (command -v yum && yum install -y sshpass || dnf install -y sshpass)
        else
          echo "Please install sshpass manually" >&2; exit 1

  tasks:
    # ---------- Export on router ----------
    - name: Export config (.rsc)
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        ssh -p {{ ansible_port }} {{ ssh_args_common }} {{ ansible_user }}@{{ inventory_hostname }}
        "/export file={{ inventory_hostname }}_config_{{ backup_ts }}"
      changed_when: true

    - name: Export scripts (.rsc)
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        ssh -p {{ ansible_port }} {{ ssh_args_common }} {{ ansible_user }}@{{ inventory_hostname }}
        "/system script export file={{ inventory_hostname }}_scripts_{{ backup_ts }}"
      changed_when: true

    - name: Export scheduler (.rsc)
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        ssh -p {{ ansible_port }} {{ ssh_args_common }} {{ ansible_user }}@{{ inventory_hostname }}
        "/system scheduler export file={{ inventory_hostname }}_scheduler_{{ backup_ts }}"
      changed_when: true

    - name: Full binary backup (.backup)
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        ssh -p {{ ansible_port }} {{ ssh_args_common }} {{ ansible_user }}@{{ inventory_hostname }}
        "/system/backup/save name={{ inventory_hostname }}_full_{{ backup_ts }} dont-encrypt=yes"
      changed_when: true

    # ---------- Copy back ----------
    - name: Copy config export
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        scp -P {{ ansible_port }} {{ ssh_args_common }}
        {{ ansible_user }}@{{ inventory_hostname }}:/{{ inventory_hostname }}_config_{{ backup_ts }}.rsc
        "{{ backup_base_dir }}/{{ inventory_hostname }}/"

    - name: Copy scripts export
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        scp -P {{ ansible_port }} {{ ssh_args_common }}
        {{ ansible_user }}@{{ inventory_hostname }}:/{{ inventory_hostname }}_scripts_{{ backup_ts }}.rsc
        "{{ backup_base_dir }}/{{ inventory_hostname }}/"

    - name: Copy scheduler export
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        scp -P {{ ansible_port }} {{ ssh_args_common }}
        {{ ansible_user }}@{{ inventory_hostname }}:/{{ inventory_hostname }}_scheduler_{{ backup_ts }}.rsc
        "{{ backup_base_dir }}/{{ inventory_hostname }}/"

    - name: Copy full binary backup
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        scp -P {{ ansible_port }} {{ ssh_args_common }}
        {{ ansible_user }}@{{ inventory_hostname }}:/{{ inventory_hostname }}_full_{{ backup_ts }}.backup
        "{{ backup_base_dir }}/{{ inventory_hostname }}/"

    # ---------- Cleanup (regex, RouterOS-correct) ----------
    - name: Cleanup temp files on router
      delegate_to: localhost
      ansible.builtin.shell: >
        {{ 'sshpass -p \'' + ansible_ssh_pass + '\' ' if ansible_ssh_pass is defined else '' }}
        ssh -p {{ ansible_port }} {{ ssh_args_common }} {{ ansible_user }}@{{ inventory_hostname }}
        '/file remove [/file find where name~"^{{ inventory_hostname }}_(config|scripts|scheduler)_{{ backup_ts }}\.rsc$"];
         /file remove [/file find where name~"^{{ inventory_hostname }}_full_{{ backup_ts }}\.backup$"]' || true
      changed_when: true

    # ---------- Retention ----------
    - name: Retain only last N files (local)
      delegate_to: localhost
      changed_when: false
      vars:
        keep: "{{ retention_keep }}"
        base: "{{ backup_base_dir }}/{{ inventory_hostname }}"
      ansible.builtin.shell: |
        for t in config scripts scheduler; do
          ls -1t "{{ base }}/{{ inventory_hostname }}_${t}_*.rsc" 2>/dev/null | awk 'NR>{{ keep }}' | xargs -r rm -f
        done
        ls -1t "{{ base }}/{{ inventory_hostname }}_full_*.backup" 2>/dev/null | awk 'NR>{{ keep }}' | xargs -r rm -f
